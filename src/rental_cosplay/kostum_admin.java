/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rental_cosplay;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author couser
 */
public class kostum_admin extends javax.swing.JFrame {

    private DefaultTableModel model = null;
    private PreparedStatement stat;
    private ResultSet rs;
    koneksi k = new koneksi();
    
    /**
     * Creates new form kostum
     */
    public kostum_admin() {
        initComponents();
        k.connect();
        refreshTable();
    }
    
class kostum extends kostum_admin {
    int id_baju, harga_kostum;
    String kostum, ukuran, status;

    public kostum() {
        // Validasi input kostum
        if (text_kostum.getText() == null || text_kostum.getText().trim().isEmpty()) {
            throw new IllegalArgumentException("Nama kostum tidak boleh kosong.");
        }
        this.kostum = text_kostum.getText();

        // Validasi input ukuran
        if (combo_ukuran.getSelectedItem() == null) {
            throw new IllegalArgumentException("Ukuran tidak boleh kosong.");
        }
        this.ukuran = combo_ukuran.getSelectedItem().toString();

        // Validasi input harga
        if (text_harga.getText() == null || text_harga.getText().trim().isEmpty()) {
            throw new IllegalArgumentException("Harga tidak boleh kosong.");
        }
        try {
            this.harga_kostum = Integer.parseInt(text_harga.getText());
            if (this.harga_kostum <= 0) {
                throw new IllegalArgumentException("Harga harus lebih besar dari 0.");
            }
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("Harga harus berupa angka yang valid.");
        }

        // Validasi input status
        if (combo_status_baju.getSelectedItem() == null) {
            throw new IllegalArgumentException("Status tidak boleh kosong.");
        }
        this.status = combo_status_baju.getSelectedItem().toString();
    }
}

    public void refreshTable() {
        model = new DefaultTableModel();
        model.addColumn("ID Baju");
        model.addColumn("Kostum");
        model.addColumn("Ukuran");
        model.addColumn("Harga");
        model.addColumn("Status");
        table_kostum.setModel(model);

        try {
            // Query untuk mengambil data dari tabel kostum
            this.stat = k.getCon().prepareStatement("SELECT * FROM kostum");
            this.rs = this.stat.executeQuery();

            while (rs.next()) {
                Object[] data = {
                    rs.getInt("id_baju"),
                    rs.getString("kostum"),
                    rs.getString("ukuran"),
                    rs.getInt("harga_kostum"),
                    rs.getString("status")
                };
                model.addRow(data);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error loading data: " + e.getMessage());
        }

        // Kosongkan input setelah data diperbarui
        text_id_baju.setText("");
        text_kostum.setText("");
        text_harga.setText("");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        text_id_baju = new javax.swing.JTextField();
        text_kostum = new javax.swing.JTextField();
        text_harga = new javax.swing.JTextField();
        combo_status_baju = new javax.swing.JComboBox<>();
        combo_ukuran = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_kostum = new javax.swing.JTable();
        btn_kembali = new javax.swing.JButton();
        btn_input = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kostum Admin");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        text_id_baju.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        text_id_baju.setEnabled(false);
        getContentPane().add(text_id_baju, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 450, 50));

        text_kostum.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        getContentPane().add(text_kostum, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, 450, 50));

        text_harga.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        getContentPane().add(text_harga, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 300, 450, 50));

        combo_status_baju.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        combo_status_baju.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Unavailable" }));
        getContentPane().add(combo_status_baju, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 370, 130, 50));

        combo_ukuran.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        combo_ukuran.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "S", "M", "L", "XL" }));
        getContentPane().add(combo_ukuran, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 230, 130, 60));

        table_kostum.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table_kostum.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_kostumMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_kostum);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 487, 530, 210));

        btn_kembali.setText("Kembali");
        btn_kembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_kembaliActionPerformed(evt);
            }
        });
        getContentPane().add(btn_kembali, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, 140, 50));

        btn_input.setText("Input");
        btn_input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_inputActionPerformed(evt);
            }
        });
        getContentPane().add(btn_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 440, 70, 40));

        btn_update.setText("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });
        getContentPane().add(btn_update, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 440, 80, 40));

        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });
        getContentPane().add(btn_delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 440, 70, 40));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/kostum admin [F6F32C0].png"))); // NOI18N
        jLabel7.setOpaque(true);
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void table_kostumMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_kostumMouseClicked
        // TODO add your handling code here:
    text_id_baju.setText(model.getValueAt(table_kostum.getSelectedRow(), 0).toString());
    text_kostum.setText(model.getValueAt(table_kostum.getSelectedRow(), 1).toString());
    combo_ukuran.setSelectedItem(model.getValueAt(table_kostum.getSelectedRow(), 2).toString());
    text_harga.setText(model.getValueAt(table_kostum.getSelectedRow(), 3).toString());
    combo_status_baju.setSelectedItem(model.getValueAt(table_kostum.getSelectedRow(), 4).toString());
    }//GEN-LAST:event_table_kostumMouseClicked

    private void btn_kembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_kembaliActionPerformed
        // TODO add your handling code here:
        Menu_admin reg = new Menu_admin();
        reg.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btn_kembaliActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        // TODO add your handling code here:
        try {
            // Mengambil ID yang akan dihapus
            String idBajuText = text_id_baju.getText().trim(); // Mengambil teks dari JTextField

            // Validasi ID tidak boleh kosong atau bukan angka
            if (idBajuText.isEmpty()) {
                throw new IllegalArgumentException("ID Baju tidak boleh kosong.");
            }
            int idBaju = Integer.parseInt(idBajuText); // Konversi ke integer

            // Menyiapkan query untuk menghapus data berdasarkan id_baju
            this.stat = k.getCon().prepareStatement("DELETE FROM kostum WHERE id_baju = ?");
            stat.setInt(1, idBaju); // Menggunakan id_baju sebagai parameter

            // Mengeksekusi query untuk menghapus data
            int rowsDeleted = stat.executeUpdate();

            if (rowsDeleted > 0) {
                // Menampilkan pesan sukses
                JOptionPane.showMessageDialog(null, "Data berhasil dihapus!");
            } else {
                // Menampilkan pesan jika tidak ada data yang dihapus
                JOptionPane.showMessageDialog(null, "Data dengan ID tersebut tidak ditemukan.");
            }

            // Menyegarkan tabel untuk menampilkan data terbaru
            refreshTable();
        } catch (NumberFormatException e) {
            // Menampilkan pesan jika input ID bukan angka
            JOptionPane.showMessageDialog(null, "ID Baju harus berupa angka: " + e.getMessage());
        } catch (IllegalArgumentException e) {
            // Menampilkan pesan error validasi
            JOptionPane.showMessageDialog(null, "Input tidak valid: " + e.getMessage());
        } catch (SQLException e) {
            // Menampilkan pesan error database
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
        } catch (Exception e) {
            // Menampilkan pesan error lainnya
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        // TODO add your handling code here:
        try {
            // Mengambil data dari komponen GUI untuk input
            int idBaju = Integer.parseInt(text_id_baju.getText()); // ID Baju yang akan diperbarui
            String kostumInput = text_kostum.getText().trim(); // Nama kostum
            String ukuranInput = combo_ukuran.getSelectedItem().toString(); // Ukuran kostum dari JComboBox
            int hargaInput = Integer.parseInt(text_harga.getText().trim()); // Harga kostum dari JTextField
            String statusInput = combo_status_baju.getSelectedItem().toString(); // Status dari JComboBox

            // Validasi data
            if (kostumInput.isEmpty()) {
                throw new IllegalArgumentException("Nama kostum tidak boleh kosong.");
            }
            if (ukuranInput.isEmpty()) {
                throw new IllegalArgumentException("Ukuran tidak boleh kosong.");
            }
            if (hargaInput <= 0) {
                throw new IllegalArgumentException("Harga harus lebih besar dari 0.");
            }
            if (statusInput.isEmpty()) {
                throw new IllegalArgumentException("Status tidak boleh kosong.");
            }

            // Membuat query untuk memperbarui data di tabel kostum
            this.stat = k.getCon().prepareStatement(
                "UPDATE kostum SET kostum = ?, ukuran = ?, harga_kostum = ?, status = ? WHERE id_baju = ?"
            );

            // Menetapkan parameter untuk query
            stat.setString(1, kostumInput);
            stat.setString(2, ukuranInput);
            stat.setInt(3, hargaInput);
            stat.setString(4, statusInput);
            stat.setInt(5, idBaju); // ID baju sebagai kondisi WHERE

            // Mengeksekusi query untuk memperbarui data
            int rowsUpdated = stat.executeUpdate();

            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(null, "Data berhasil diperbarui!");
            } else {
                JOptionPane.showMessageDialog(null, "Data gagal diperbarui. Periksa ID Baju.");
            }

            // Menyegarkan tabel untuk menampilkan data terbaru
            refreshTable();
        } catch (IllegalArgumentException e) {
            // Menampilkan pesan error validasi
            JOptionPane.showMessageDialog(null, "Input tidak valid: " + e.getMessage());
        } catch (SQLException e) {
            // Menampilkan pesan error database
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
        } catch (Exception e) {
            // Menampilkan pesan error lainnya
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_inputActionPerformed
        // TODO add your handling code here:
        try {
            // Mengambil data dari komponen GUI untuk input
            String kostumInput = text_kostum.getText().trim();
            String ukuranInput = combo_ukuran.getSelectedItem().toString();
            int hargaInput = Integer.parseInt(text_harga.getText().trim());
            String statusInput = combo_status_baju.getSelectedItem().toString();

            // Validasi input
            if (kostumInput.isEmpty()) {
                throw new IllegalArgumentException("Nama kostum tidak boleh kosong.");
            }
            if (hargaInput <= 0) {
                throw new IllegalArgumentException("Harga harus lebih besar dari 0.");
            }

            // Membuat query untuk menambahkan data baru ke tabel kostum
            this.stat = k.getCon().prepareStatement(
                "INSERT INTO kostum (kostum, ukuran, harga_kostum, status) VALUES (?, ?, ?, ?)",
                PreparedStatement.RETURN_GENERATED_KEYS
            );

            // Menetapkan parameter untuk query
            stat.setString(1, kostumInput);
            stat.setString(2, ukuranInput);
            stat.setInt(3, hargaInput);
            stat.setString(4, statusInput);
            JOptionPane.showMessageDialog(null, "Data berhasil disimpan!");

            // Mengeksekusi query
            int rowsInserted = stat.executeUpdate();

            // Mendapatkan ID yang dihasilkan (opsional)
            if (rowsInserted > 0) {
                ResultSet generatedKeys = stat.getGeneratedKeys();
                if (generatedKeys.next()) {
                    int generatedId = generatedKeys.getInt(1);
                }
            }

            // Menyegarkan tabel
            refreshTable();
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, "Input tidak valid: " + e.getMessage());
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btn_inputActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(kostum_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(kostum_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(kostum_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(kostum_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new kostum_admin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_input;
    private javax.swing.JButton btn_kembali;
    private javax.swing.JButton btn_update;
    private javax.swing.JComboBox<String> combo_status_baju;
    private javax.swing.JComboBox<String> combo_ukuran;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table_kostum;
    private javax.swing.JTextField text_harga;
    private javax.swing.JTextField text_id_baju;
    private javax.swing.JTextField text_kostum;
    // End of variables declaration//GEN-END:variables
}
